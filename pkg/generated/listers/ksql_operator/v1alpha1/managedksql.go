/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "ksql_operator/pkg/apis/ksql_operator/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedKSQLLister helps list ManagedKSQLs.
// All objects returned here must be treated as read-only.
type ManagedKSQLLister interface {
	// List lists all ManagedKSQLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedKSQL, err error)
	// ManagedKSQLs returns an object that can list and get ManagedKSQLs.
	ManagedKSQLs(namespace string) ManagedKSQLNamespaceLister
	ManagedKSQLListerExpansion
}

// managedKSQLLister implements the ManagedKSQLLister interface.
type managedKSQLLister struct {
	indexer cache.Indexer
}

// NewManagedKSQLLister returns a new ManagedKSQLLister.
func NewManagedKSQLLister(indexer cache.Indexer) ManagedKSQLLister {
	return &managedKSQLLister{indexer: indexer}
}

// List lists all ManagedKSQLs in the indexer.
func (s *managedKSQLLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedKSQL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedKSQL))
	})
	return ret, err
}

// ManagedKSQLs returns an object that can list and get ManagedKSQLs.
func (s *managedKSQLLister) ManagedKSQLs(namespace string) ManagedKSQLNamespaceLister {
	return managedKSQLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedKSQLNamespaceLister helps list and get ManagedKSQLs.
// All objects returned here must be treated as read-only.
type ManagedKSQLNamespaceLister interface {
	// List lists all ManagedKSQLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedKSQL, err error)
	// Get retrieves the ManagedKSQL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedKSQL, error)
	ManagedKSQLNamespaceListerExpansion
}

// managedKSQLNamespaceLister implements the ManagedKSQLNamespaceLister
// interface.
type managedKSQLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedKSQLs in the indexer for a given namespace.
func (s managedKSQLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedKSQL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedKSQL))
	})
	return ret, err
}

// Get retrieves the ManagedKSQL from the indexer for a given namespace and name.
func (s managedKSQLNamespaceLister) Get(name string) (*v1alpha1.ManagedKSQL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedksql"), name)
	}
	return obj.(*v1alpha1.ManagedKSQL), nil
}
